package com.huawei.wuqf.designpattern.simplefactory;

public class CheesePizza implements Pizza{

	public void prepare() {
		System.out.println("prepare CheesePizza ...");
	}

	public void bake() {
		System.out.println("bake CheesePizza ...");
	}

	public void cut() {
		System.out.println("cut CheesePizza ...");
	}

	public void box() {
		System.out.println("box CheesePizza ...");
	}

}



package com.huawei.wuqf.designpattern.simplefactory;

/**
 * 
 * @author w00268347
 *
 *Pizza接口
 */
public interface Pizza {
	
	public void prepare();

	public void bake();

	public void cut();

	public void box();
}



package com.huawei.wuqf.designpattern.simplefactory;

public class PizzaStore {

	private SimplePizzaFactory factory;

	public PizzaStore(SimplePizzaFactory factory) {
		this.factory=factory;
	}
	public Pizza orderPizza(PizzaType pizzaType)
	{
		Pizza pizza = factory.createPizza(pizzaType);
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		
		return pizza;
	}

	public static void main(String[] args)
	{
		SimplePizzaFactory factory=new SimplePizzaFactory();
		PizzaStore store=new PizzaStore(factory);
		store.orderPizza(PizzaType.SaltPizza);
	}
}



package com.huawei.wuqf.designpattern.simplefactory;

public enum PizzaType {
	CheesePizza ("CHEESE"),
	SaltPizza("SALT");
	
	private final String pizzaName;
	
	PizzaType (String pizzaName){
	this.pizzaName=pizzaName;
	}
}



package com.huawei.wuqf.designpattern.simplefactory;

public class SaltPizza implements Pizza{

	public void prepare() {
		System.out.println("prepare SaltPizza ...");
	}

	public void bake() {
		System.out.println("bake SaltPizza ...");
	}

	public void cut() {
		System.out.println("cut SaltPizza ...");
	}

	public void box() {
		System.out.println("box SaltPizza ...");
	}

}



package com.huawei.wuqf.designpattern.simplefactory;
/**
 * 
 * @author w00268347
 * 
 * 优点
            1、简单工厂模式实现了对责任的分割，提供了专门的工厂类用于创建对象。
            2、客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。
            3、通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。
           缺点
            1、由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。
            2、使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。
            3、系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。
            4、简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。
 */
public class SimplePizzaFactory {
	public Pizza createPizza(PizzaType pizzaType) {
		System.out.println(pizzaType);
		switch (pizzaType) {
		case CheesePizza:
			return new CheesePizza();
		case SaltPizza:
			return new SaltPizza();
		default:
			return null;
		}
	}
}









